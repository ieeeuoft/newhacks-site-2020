name: CI/CD

on:
  push:
    branches: '**'

env:
  IMAGE_ROOT: docker.pkg.github.com/${{ github.repository }}
  STACK_NAME: newhacks-site-2020

jobs:
  backend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hackathon_site

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check formatting with Black
        run: |
          # Stop the build if there are any formatting issues picked up by Black
          black --check .
      - name: Tests
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 0
        run: python manage.py test --settings=hackathon_site.settings.ci

  event-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hackathon_site/event

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install dependencies
        run: yarn install
      - name: Formatting check
        run: yarn prettier --check 'static/**/*.(scss|js)'

  dashboard-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hackathon_site/dashboard/frontend

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install dependencies
        run: yarn install
      - name: Formatting check
        run: yarn prettier --check 'src/**/*.(scss|js)'
      - name: Tests
        run: yarn test --watchAll=false

  build:
    runs-on: ubuntu-latest
    needs: [ backend-checks, event-checks, dashboard-checks ]
    if: github.ref == 'refs/heads/master'
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.sha7.outputs.GITHUB_SHA_SHORT }}

    steps:
      - uses: actions/checkout@v2
      - name: Get short SHA
        id: sha7
        run: |
          echo "::set-env name=GITHUB_SHA_SHORT::$(echo ${{ github.sha }} | cut -c1-7)"
          echo "::set-output name=GITHUB_SHA_SHORT::$(echo ${{ github.sha }} | cut -c1-7)"
      - name: Build image
        run: docker-compose -f deployment/docker-compose.ci.yml build
      - name: Authenticate Docker with GitHub Packages
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: docker-compose -f deployment/docker-compose.ci.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: deployment

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install python dependencies
        working-directory: hackathon_site
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install nodejs dependencies
        working-directory: hackathon_site/event
        run: yarn install
      - name: Compile scss
        working-directory: hackathon_site/event
        run: yarn scss
      - name: Collect static
        working-directory: hackathon_site
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: python manage.py collectstatic
      - name: Set environment variables in .env
        run: |
          echo 'DEBUG=0' >> .env
          echo 'SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
      - name: Substitute variables in compose file
        run: |
          cp docker-compose.prod.yml docker-compose.prod.tmp.yml
          cat docker-compose.prod.tmp.yml \
            | sed "s,{{IMAGE_ROOT}},${{ env.IMAGE_ROOT }},g" \
            | sed "s,{{GITHUB_SHA_SHORT}},${{ needs.build.outputs.GITHUB_SHA_SHORT }},g" \
            > docker-compose.prod.yml
      - name: Transfer deployment and static files to the Swarm manager
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          overwrite: true
          # scp-action doesn't obey working-directory, runs at repo root
          source: "deployment/.env,deployment/docker-compose.prod.yml,hackathon_site/static/"
          target: "/usr/src/${{ github.repository }}"
          strip_components: 1
      - name: Bring up deployment
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SWARM_MANAGER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /usr/src/${{ github.repository }}
            ./deploy.sh ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }} ${{ env.STACK_NAME }}
